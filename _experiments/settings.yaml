---
# general settings
data_dir: logs
# data_file: log129
info_dir: info
event_name: fixedFrequency
start_time: # s
end_time: # s (not in use currently)
output_dir: reports
figures_max:
skip_data:
- timestamp

# title settings
title_settings:
- data_dir
# - data_file
- start_time
- end_time

# results settings
errors: 
- "L2 integral error"
- "L2 mean"
- "L2 std"
- "L2 max"

# figure settings
figures:
- title: UAV Positions 
  type: 2d subplots
  x_label: "$t [s]$"
  structure:
  - timestamp:
      y_info:
        data:
          locSrv.x: mocap
          stateEstimateZ.x: estimated
          ctrltargetZ.x: desired
        label: "$x [m]$"
  - timestamp:
      y_info:
        data:
          locSrv.y: mocap
          stateEstimateZ.y: estimated
          ctrltargetZ.y: desired
        label: "$y [m]$"
  - timestamp:
      y_info:
        data:
          locSrv.z: mocap
          stateEstimateZ.z: estimated
          ctrltargetZ.z: desired
        label: "$z [m]$"
- title: UAV Translational Velocities
  type: 2d subplots
  x_label: "$t [s]$"
  structure:
  - timestamp:
      y_info:
        data:
          stateEstimateZ.vx: actual
          ctrltargetZ.vx: desired
        label: "$\\dot x [m/s]$"
  - timestamp:
      y_info:
        data:
          stateEstimateZ.vy: actual
          ctrltargetZ.vy: desired
        label: "$\\dot y [m/s]$"
  - timestamp:
      y_info:
        data:
          stateEstimateZ.vz: actual
          ctrltargetZ.vz: desired
        label: "$\\dot z [m/s]$"
- title: UAV Translational Accelerations
  type: 2d subplots
  x_label: "$t [s]$"
  structure:
  - timestamp:
      y_info:
        data:
          acc.x: actual
        label: "$\\ddot x [m/s^2]$"
  - timestamp:
      y_info:
        data:
          acc.y: actual
        label: "$\\ddot y [m/s^2]$"
  - timestamp:
      y_info:
        data:
          acc.z: actual
        label: "$\\ddot z [m/s^2]$"
- title: UAV Angles (rpy)
  type: 2d subplots
  x_label: "$t [s]$"
  structure:
  - timestamp:
      y_info:
        data:
          ctrlLee.rpyx: actual
          ctrlLee.rpydx: desired
        label: "$\\phi [°]$"
  - timestamp:
      y_info:
        data:
          ctrlLee.rpyy: actual
          ctrlLee.rpydy: desired
        label: "$\\theta [°]$"
  - timestamp:
      y_info:
        data:
          ctrlLee.rpyz: actual
          ctrlLee.rpydz: desired
        label: "$\\psi [°]$"
- title: UAV Angular Velocities (rpy)
  type: 2d subplots
  x_label: "$t [s]$"
  structure:
  - timestamp:
      y_info:
        data:
          ctrlLee.omegax: actual
          ctrlLee.omegarx: desired
        label: "$\\dot \\phi [°/s]$"
  - timestamp:
      y_info:
        data:
          ctrlLee.omegay: actual
          ctrlLee.omegary: desired
        label: "$\\dot \\theta [°/s]$"
  - timestamp:
      y_info:
        data:
          ctrlLee.omegaz: actual
          ctrlLee.omegarz: desired
        label: "$\\dot \\psi [°/s]$"
- title: Payload Positions
  type: 2d subplots
  x_label: "$t [s]$"
  structure:
  - timestamp:
      y_info:
        data:
          fitZ.px: fitted
          stateEstimateZ.px: actual
        label: "$x [m]$"
  - timestamp:
      y_info:
        data:
          fitZ.py: fitted
          stateEstimateZ.py: actual
        label: "$y [m]$"
  - timestamp:
      y_info:
        data:
          fitZ.pz: fitted
          stateEstimateZ.pz: actual
        label: "$z [m]$"
- title: Payload Translational Velocities
  type: 2d subplots
  x_label: "$t [s]$"
  structure:
  - timestamp:
      y_info:
        data:
          fitZ.pvx: fitted
          stateEstimateZ.pvx: actual
        label: "$\\dot x [m/s]$"
  - timestamp:
      y_info:
        data:
          fitZ.pvy: fitted
          stateEstimateZ.pvy: actual
        label: "$\\dot y [m/s]$"
  - timestamp:
      y_info:
        data:
          fitZ.pvz: fitted
          stateEstimateZ.pvz: actual
        label: "$\\dot z [m/s]$"
- title: Payload Translational Accelerations
  type: 2d subplots
  x_label: "$t [s]$"
  structure:
  - timestamp:
      y_info:
        data:
          fitZ.pax: fitted
        label: "$\\ddot x [m/s^2]$"
  - timestamp:
      y_info:
        data:
          fitZ.pay: fitted
        label: "$\\ddot y [m/s^2]$"
  - timestamp:
      y_info:
        data:
          fitZ.paz: fitted
        label: "$\\ddot z [m/s^2]$"
- title: Thrust
  type: 2d subplots
  x_label: "$t$ [s]"
  structure:
  - timestamp:
      y_info:
        data:
          ctrlLee.thrustSI: actual
        label: "$T [N]$"
- title: Torques (xyz)
  type: 2d subplots
  x_label: "$t [s]$"
  structure:
  - timestamp:
      y_info:
        data:
          ctrlLee.torquex: actual
        label: "$\\tau_x [Nm]$"
  - timestamp:
      y_info:
        data:
          ctrlLee.torquey: actual
        label: "$\\tau_y [Nm]$"
  - timestamp:
      y_info:
        data:
          ctrlLee.torquez: actual
        label: "$\\tau_z [Nm]$"
- title: Trajectory
  type: 3d
  x_label: $x [m]$
  y_label: $y [m]$
  z_label: $z [m]$
  structure:
  - - stateEstimateZ.x
    - stateEstimateZ.y
    - stateEstimateZ.z
    - actual
  - - ctrltargetZ.x
    - ctrltargetZ.y
    - ctrltargetZ.z
    - desired
- title: Trajectory
  type: 2d single
  structure:
  - x_axis: stateEstimateZ.x
    y_axis: stateEstimateZ.y
    legend: actual
    x_label: "$x [m]$"
    y_label: "$y [m]$"
  - x_axis: ctrltargetZ.x
    y_axis: ctrltargetZ.y
    legend: desired
    x_label: "$x [m]$"
    y_label: "$y [m]$"

# unit settings
convert_units:
  timestamp: 0.001
  stateEstimateZ.x: 0.001
  stateEstimateZ.y: 0.001
  stateEstimateZ.z: 0.001
  stateEstimateZ.vx: 0.001
  stateEstimateZ.vy: 0.001
  stateEstimateZ.vz: 0.001
  ctrltargetZ.x: 0.001
  ctrltargetZ.y: 0.001
  ctrltargetZ.z: 0.001
  ctrltargetZ.vx: 0.001
  ctrltargetZ.vy: 0.001
  ctrltargetZ.vz: 0.001
  ctrlLee.rpyx: 57.2957795131
  ctrlLee.rpydx: 57.2957795131
  ctrlLee.rpyy: 57.2957795131
  ctrlLee.rpydy: 57.2957795131
  ctrlLee.rpyz: 57.2957795131
  ctrlLee.rpydz: 57.2957795131
  ctrlLee.omegax: 57.2957795131
  ctrlLee.omegarx: 57.2957795131
  ctrlLee.omegay: 57.2957795131
  ctrlLee.omegary: 57.2957795131
  ctrlLee.omegaz: 57.2957795131
  ctrlLee.omegarz: 57.2957795131
  acc.x: 1.0
  acc.y: 1.0
  acc.z: 1.0
  stateEstimateZ.px: 0.001
  stateEstimateZ.py: 0.001
  stateEstimateZ.pz: 0.001
  stateEstimateZ.pvx: 0.001
  stateEstimateZ.pvy: 0.001
  stateEstimateZ.pvz: 0.001
  locSrv.x: 1.0
  locSrv.y: 1.0
  locSrv.z: 1.0
  locSrv.qx: 1.0
  locSrv.qy: 1.0
  locSrv.qz: 1.0
  locSrv.qw: 1.0
# units:
#   timestamp: s
#   stateEstimateZ.x: m
#   stateEstimateZ.y: m
#   stateEstimateZ.z: m
#   stateEstimateZ.vx: m/s
#   stateEstimateZ.vy: m/s
#   stateEstimateZ.vz: m/s
#   ctrltargetZ.x: m
#   ctrltargetZ.y: m
#   ctrltargetZ.z: m
#   ctrltargetZ.vx: m/s
#   ctrltargetZ.vy: m/s
#   ctrltargetZ.vz: m/s
#   ctrlLee.rpyx: °
#   ctrlLee.rpyy: °
#   ctrlLee.rpyz: °
#   ctrlLee.rpydx: °
#   ctrlLee.rpydy: °
#   ctrlLee.rpydz: °
#   ctrlLee.omegax: °/s
#   ctrlLee.omegay: °/s
#   ctrlLee.omegaz: °/s
#   ctrlLee.omegarx: °/s
#   ctrlLee.omegary: °/s
#   ctrlLee.omegarz: °/s
#   ctrlLee.thrustSI: N
#   ctrlLee.torquex: Nm
#   ctrlLee.torquey: Nm
#   ctrlLee.torquez: Nm
#   acc.x: m/s^2
#   acc.y: m/s^2
#   acc.z: m/s^2
#   stateEstimate.px: m
#   stateEstimate.py: m
#   stateEstimate.pz: m
#   stateEstimate.pvx: m/s
#   stateEstimate.pvy: m/s
#   stateEstimate.pvz: m/s
#   locSrv.x: m
#   locSrv.y: m
#   locSrv.z: m
#   locSrv.qx: 
#   locSrv.qy: 
#   locSrv.qz: 
#   locSrv.qw: 

# info for adding additional data
# (1) type: poly -> takes data and returns data of fitted polynomial, or its derivative (needs degree)
# (2) type: cs   -> takes data and returns data of cubic spline, or its derivative
additional_data:
  - source: stateEstimateZ.px
    target: fitZ.px
    type: cs
    degree:
    derivative: 0
  - source: stateEstimateZ.py
    target: fitZ.py
    type: cs
    degree:
    derivative: 0
  - source: stateEstimateZ.pz
    target: fitZ.pz
    type: cs
    degree:
    derivative: 0
  - source: stateEstimateZ.px
    target: fitZ.pvx
    type: cs
    degree:
    derivative: 1
  - source: stateEstimateZ.py
    target: fitZ.pvy
    type: cs
    degree:
    derivative: 1
  - source: stateEstimateZ.pz
    target: fitZ.pvz
    type: cs
    degree:
    derivative: 1
  - source: stateEstimateZ.px
    target: fitZ.pax
    type: cs
    degree:
    derivative: 2
  - source: stateEstimateZ.py
    target: fitZ.pay
    type: cs
    degree:
    derivative: 2
  - source: stateEstimateZ.pz
    target: fitZ.paz
    type: cs
    degree:
    derivative: 2
  
  

